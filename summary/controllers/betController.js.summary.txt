
### **File Location:** `backend/controllers/betController.js`

**File Purpose:**  
Manages bet-related operations, including placing bets, accepting bets, retrieving bet history, and fetching available game seekers.

**Key Functionality:**
- `getBetHistory`: Retrieves the authenticated user's bet history with support for pagination and sorting.
- `getAvailableSeekers`: Fetches all pending bets (game seekers) available for matching.
- `placeBet`: Allows authenticated users to place new bets by specifying color preferences, amount, and optional match details.
- `acceptBet`: Enables users to accept existing pending bets, handles color assignment, deducts tokens, creates a Lichess game, and updates the bet record accordingly.

**Dependencies:**
- `Bet` model
- `User` model
- `authenticateToken` middleware for authentication
- `lichessService` for creating and verifying Lichess games

**Connections:**
- Interacts with `Bet` and `User` models to create, read, update, and delete bet records.
- Utilizes authentication middleware to ensure secure access to routes.
- Connects with `lichessService` to handle game creation and outcome verification.

**Current Status:**
- **Completed:** Core functionalities for managing bets are implemented and operational.
- **Refined:** The bet placement flow no longer requires a Lichess game ID upfront, aligning with user journey improvements.

**Issues/Challenges:**
- Ensuring atomic operations to handle concurrent bet acceptances.
- Managing Lichess API limitations for game creation.
- Handling edge cases such as invalid user inputs or API failures.

**Next Steps:**
- Implement additional filters for bet retrieval (e.g., by status, date range).
- Enhance error handling to cover more scenarios and provide detailed feedback.
- Integrate user notifications for bet placements and game link deliveries.
- Optimize controller methods for better performance and scalability.
 Optimize database indexes for faster query performance.
