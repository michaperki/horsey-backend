
### **File Location:** `backend/services/lichessService.js`

**File Purpose:**  
Handles interactions with the Lichess API, including creating games and fetching game outcomes. Supports both real API interactions and mocked data for testing purposes.

**Key Functionality:**
- `getGameOutcome`: Retrieves game outcomes either from the real Lichess API or returns mocked data based on environment configuration.
- `fetchGameOutcomeFromLichess`: Fetches actual game data from Lichess using `axios`.
- `createLichessGame`: Sends a challenge to the opponent via a Lichess bot account to initiate a game.
- `getMockedGameOutcome`: Returns predefined mock game outcomes for testing purposes.

**Dependencies:**
- `axios`
- `dotenv`
- `lichessMockData.js`

**Connections:**
- Used by controllers and services to verify game outcomes before processing bets.
- Interfaces with the external Lichess API or internal mock data based on environment variables.

**Current Status:**
- **Completed:** Lichess service is implemented with support for mocking in tests.
- **Consolidated:** Removed duplicate function definitions and ensured proper module exports.

**Issues/Challenges:**
- Handling rate limits and API errors from Lichess.
- Ensuring mock data accurately reflects possible real-world scenarios.
- Managing the complexities of Lichess API limitations regarding game creation.

**Next Steps:**
- Implement caching mechanisms to reduce redundant API calls.
- Enhance error handling to cover more failure modes and edge cases.
- Explore webhook integrations or real-time updates to handle game events dynamically.
- Securely manage bot account credentials and ensure compliance with Lichess API terms.

